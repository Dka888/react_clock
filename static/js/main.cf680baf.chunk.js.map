{"version":3,"sources":["components/Clock.tsx","App.tsx","index.tsx"],"names":["getDate","Date","toUTCString","slice","Clock","state","date","timerID","this","window","setInterval","tick","clearInterval","setState","clockName","props","className","React","Component","getRandomName","value","now","toString","App","hasClock","timerId","rename","document","addEventListener","event","preventDefault","ReactDOM","render","getElementById"],"mappings":"sNAUA,SAASA,IACP,OAAO,IAAIC,MAAOC,cAAcC,OAAO,IAAK,GAGvC,IAAMC,EAAb,4MACEC,MAAQ,CAAEC,KAAMN,KADlB,EAGEO,aAHF,yDAKE,WAAqB,IAAD,OAClBC,KAAKD,QAAUE,OAAOC,aAAY,kBAAM,EAAKC,SAAQ,OANzD,kCAeE,WACMH,KAAKD,SACPE,OAAOG,cAAcJ,KAAKD,WAjBhC,kBAqBE,WACEC,KAAKK,SAAS,CACZP,KAAMN,QAvBZ,oBA2BE,WACE,IAAQM,EAASE,KAAKH,MAAdC,KACAQ,EAAcN,KAAKO,MAAnBD,UAER,OACE,sBAAKE,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGF,IAGF,YAED,sBAAME,UAAU,cAAhB,SACGV,WAxCX,GAA2BW,IAAMC,WCVjC,SAASC,IACP,IAAMC,EAAQnB,KAAKoB,MAAMC,WAAWnB,OAAO,GAE3C,MAAM,SAAN,OAAgBiB,GAQX,IAAMG,EAAb,4MACElB,MAAQ,CACNmB,UAAU,EACVV,UAAW,WAHf,EAMEW,QAAUhB,OAAOC,aAAY,kBAAM,EAAKgB,WAAU,MANpD,uDAQE,WAA2B,IAAD,OACxBC,SAASC,iBAAiB,eAAe,SAACC,GACxCA,EAAMC,iBACN,EAAKjB,SAAS,CAAEW,UAAU,OAE5BG,SAASC,iBAAiB,SAAS,WACjC,EAAKf,SAAS,CAAEW,UAAU,SAdhC,oBAkBE,WACEhB,KAAKK,SAAS,CACZC,UAAWK,QApBjB,oBAwBE,WACE,MAAgCX,KAAKH,MAA7BmB,EAAR,EAAQA,SAAUV,EAAlB,EAAkBA,UAElB,OACE,sBAAKE,UAAU,MAAf,UACE,6CACCQ,GAAY,cAAC,EAAD,CAAOV,UAAWA,WA9BvC,GAAyBG,IAAMC,WCZ/Ba,IAASC,OACP,cAAC,EAAD,IACAL,SAASM,eAAe,W","file":"static/js/main.cf680baf.chunk.js","sourcesContent":["import React from 'react';\n\ninterface ClockState {\n  date: string,\n}\n\ninterface ClockProps {\n  clockName: string;\n}\n\nfunction getDate() {\n  return new Date().toUTCString().slice(-12, -4);\n}\n\nexport class Clock extends React.Component<ClockProps, ClockState> {\n  state = { date: getDate() };\n\n  timerID!: number | null;\n\n  componentDidMount() {\n    this.timerID = window.setInterval(() => this.tick(), 1000);\n\n    // console.info(this.state.date);\n  }\n\n  // componentDidUpdate(prevProps: Readonly<ClockProps>): void {\n  //   console.debug(prevProps);\n  // }\n\n  componentWillUnmount() {\n    if (this.timerID) {\n      window.clearInterval(this.timerID);\n    }\n  }\n\n  tick() {\n    this.setState({\n      date: getDate(),\n    });\n  }\n\n  render() {\n    const { date } = this.state;\n    const { clockName } = this.props;\n\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {clockName}\n        </strong>\n\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {date}\n        </span>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Clock } from './components/Clock';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\ninterface AppState {\n  hasClock: boolean,\n  clockName: string,\n}\n\nexport class App extends React.Component<{}, AppState> {\n  state = {\n    hasClock: true,\n    clockName: 'Clock-0',\n  };\n\n  timerId = window.setInterval(() => this.rename(), 3300);\n\n  componentDidMount(): void {\n    document.addEventListener('contextmenu', (event) => {\n      event.preventDefault();\n      this.setState({ hasClock: false });\n    });\n    document.addEventListener('click', () => {\n      this.setState({ hasClock: true });\n    });\n  }\n\n  rename(): void {\n    this.setState({\n      clockName: getRandomName(),\n    });\n  }\n\n  render(): React.ReactNode {\n    const { hasClock, clockName } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        {hasClock && <Clock clockName={clockName} />}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}